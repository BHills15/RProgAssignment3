filter(data.df, State == state)
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
## function best(state, outcome) will read outcome data
## from each state and determine lowest 30-day death rate
# inputs best("TX", "heart attack") /returns CYPRESS...
# best("MD", "heart attack) /returns JOHNS...
#best("TX", "heart failure") /returns FORT...
#best("MD", "pneumonia")  /returns GREATER...
#best("BB", "heart attack") /returns error "invalid state"
#best("NY", "hert attack") /returns error "invalid outcome"
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv")
data.df <- tbl_df(data)
best <- function(state){
check.st <- state
#print(check.st)
if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
num.rates <- sapply(a.numeric(select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
num.rates <- sapply(as.numeric(select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
num.rates <- as.numeric(select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
#num.rates <- as.numeric(select(data.df, Hospital.Name, State,
#Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
#Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
#Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
tx.hosp <- best("TX")
head(tx.hosp)
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
sel.colm <- select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
tx.hosp <- best("TX")
summary(tx.hosp)
numeric <- as.numeric(sapply(sel.colm))
sapply(sel.colm, class)
sel.colm
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
sel.colm <- select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
sel.colm
best("TX")
tx.hosp <- best("TX")
sel.colm
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
as.numeric(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
hosp <- best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
as.numeric(data.df,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
hosp <- best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
best <- function(state){
check.st <- state
#print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
filter(data.df, State == state)
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("TX")
best("MD")
print(check.st)
## function best(state, outcome) will read outcome data
## from each state and determine lowest 30-day death rate
# inputs best("TX", "heart attack") /returns CYPRESS...
# best("MD", "heart attack) /returns JOHNS...
#best("TX", "heart failure") /returns FORT...
#best("MD", "pneumonia")  /returns GREATER...
#best("BB", "heart attack") /returns error "invalid state"
#best("NY", "hert attack") /returns error "invalid outcome"
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
best <- function(state){
filter(data.df, State == state)
check.st <- state
print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("MD")
best <- function(state){
st <- filter(data.df, State == state)
check.st <- state
print(check.st)
#if check.st == FALSE{ stop("error : invalid state")}
select(data.df, Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#numeric <- as.numeric(sapply(sel.colm))
#filter(ranks, State == TX)
# if state = NULL stop error : invalid state
#mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
#min.outcome <- min_rank(mort.columns) or by
#arrange(mort.columns, outcome, state)
}
best("MD")
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
}
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
}
best <- function(state){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
}
hosp <- best("TX")
hosp
str(hosp)
best <- function(state){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
}
hosp <- best("MD")
hosp
## function best(state, outcome) will read outcome data
## from each state and determine lowest 30-day death rate
# inputs best("TX", "heart attack") /returns CYPRESS...
# best("MD", "heart attack) /returns JOHNS...
#best("TX", "heart failure") /returns FORT...
#best("MD", "pneumonia")  /returns GREATER...
#best("BB", "heart attack") /returns error "invalid state"
#best("NY", "hert attack") /returns error "invalid outcome"
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
best <- function(state){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
}
hosp <- best("TX")
hosp
best("TX")
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
best <- function(state){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
arrange(data.df, coltail = contains(outcome))
}
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
arrange(data.df, coltail = contains(outcome))
}
best("TX", "heart attack")
}
## function best(state, outcome) will read outcome data
## from each state and determine lowest 30-day death rate
# inputs best("TX", "heart attack") /returns CYPRESS...
# best("MD", "heart attack) /returns JOHNS...
#best("TX", "heart failure") /returns FORT...
#best("MD", "pneumonia")  /returns GREATER...
#best("BB", "heart attack") /returns error "invalid state"
#best("NY", "hert attack") /returns error "invalid outcome"
# library(dplyr)
# setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
# best <- function(state, outcome){
#     readfile <- function(){
#       data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
#                    na.strings="Not Available")
#       data.df <- tbl_df(data)
#          filter(data.df, State == state)
#             select(data.df, Hospital.Name,
#               Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
#               Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
#               Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#       }
#         arrange(data.df, coltail = contains(outcome))
#   }
}
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
for (num in c(1, 11, 13:15, 17, 19:21, 23, 25:27, 29, 31:33, 35, 37:39, 41, 43:45)) {
csv[, num] <- as.numeric(csv[, num])
}
tbl_df(csv)
}
coltail <- function(outcome) {
if(outcome == "heart attack") {
"Heart.Attack"
} else if (outcome == "heart failure") {
"Heart.Failure"
} else if (outcome == "pneumonia") {
"Pneumonia"
} else {
stop("invalid outcome")
}
}
best <- function(state, outcome) {
csv <- readcsv()
columnName <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", coltail(outcome), sep="")
csv <- filter(csv, State == state)
if (nrow(csv) == 0) {
stop("invalid state")
}
csv <- arrange_(csv, .dots=c(columnName, "Hospital.Name"))[1, "Hospital.Name"]
as.character(csv)
}
best("MD", "pneu")
best("MD", "heart attack")
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
arrange(data.df, coltail = contains(outcome))
}
}
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
filter(data.df, State == state)
select(data.df, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
arrange(data.df, coltail = contains(outcome))
}
best("TX", "heart attack")
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
}
}
head(data.df)
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
best <- function(state, outcome){
readfile <- function(){
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
}
data.df <- tbl_df(data)
}
head(data.df)
str(data.df)
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
#
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings="Not Available")
data.df <- tbl_df(data)
}
head(data.df)
library(dplyr)
setwd("C:/Users/HillsLaptop/Documents/R/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
outcome$rate <- as.numeric(outcome[, 11])
outcome <- arrange(outcome, rate)
outcome
str(outcome)
