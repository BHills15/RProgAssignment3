z <- 10
f(3)
x <- 5
y <- if(x < 3){
NA
}else{
10
}
y
h <- function(x, y = NULL, d = 3L){
z <- cbind(x, d)
if(!is.null(y))
z<- z + y
else
z<- z + f
g<- x + y / z
if(d == 3L)
return(g)
g<- g + 10
g
}
z
L
f
d
g
h <- function(x, y = NULL, d = 3L){
z <- cbind(x, d)
if(!is.null(y))
z<- z + y
else
z<- z + f
g<- x + y / z
if(d == 3L)
return(g)
g<- g + 10
g
}
d
g
f
z
d
search()
f <- function(x){
y <- 2 * x
print(x)
print(y)
print(z)
}
fun1 <- function(x) x + y
fun2 <- function(){
y <- 20
function(x) x + y
}
fun3 <- fun2()
fun1
fun3
y <-2
fun1(5)
fun3(5)
boot <- function(x, statistic, bootreps) {
n <- length(x)
sapply(1:bootreps,
function(dummy)
statistic(sample(x, n ,replace = TRUE)))
}
?sample
?statistic
sum1 <- function(x) {
sum <- 0
for (i in 1:length(x))
sum <- sum + x[i]
sum
}
sum2 <- function(x) {
if (length(x) == 1)
x
else
x[1] + sum2(x[-1])
}
Rmlfun <- function(x) {
sumx <- sum(x)
n <- length(x)
function(mu)
n * log(mu) - mu * sumx
}
efun(3)
Rmlfun <- function(x) {
sumx <- sum(x)
n <- length(x)
function(mu)
n * log(mu) - mu * sumx
}
efun <- Rmlfun(1:10)  # efun is a function
efun(3)
efun2 <- Rmlfun(20:30)  # efun2 is a function
efun2(3)
efun(3)
mkecdf <- function(x) {
n <- length(x)
function(t)
sum(x <= t) / n
}
make.random <- function(seed)
list(rand =
function(){
seed <<- (9 * seed + 5) %% 1024
seed
},
setseed =
function(nseed){
seed <<- nseed
},
getseed =
function(){
seed
}
)
rand <- make.random(1)
rand$rand()
rand$rand
rand$rand()
rand1 <- make.random(1)
rand2 <- make.random(101)
rand1$rand()
rand2$rand()
rand1$rand()
library(datasets)
data(iris)
str(data)
str(iris)
mean.virg <- mean(iris, "Sepal.Length")
head(iris)
virginica <- iris["virginica"]
virginica <- iris[colName = "virginica"]
virginica <- subset(iris, colName = "virginica")
head(virginica)
virginica <- subset(iris, colName(Species = "virginica")
virginica <- subset(iris, Species = "virginica", Sepal.Length)
virginica <- subset(iris, Species == "virginica", Sepal.Length)
head(virginica)
mean(virginica)
mean(Sepal.Length)
mean(Sepal.Length, na.rm = TRUE)
mean(virginica, na.rm = TRUE)
virginica
mean(virginica)
Sepal = virginica$Sepal.Length
Sepal
mean(Sepal)
getwd()
install.packages("tidyr")
getwd()
setwd("C:/Users/B/Toolbox/RProgAssignment3"
setwd("C:/Users/B/Toolbox/RProgAssignment3")
getwd()
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
outcome.state <- as.numeric(outcome[, 11:47])
outcome <- arrange(outcome.state, rate)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tidyr")
source('C:/Users/B/Toolbox/RProgAssignment3/best.R', echo=TRUE)
best("TX")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state, outcome){
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
as.numeric(outcome)
filter(!is.na(outcome))%>%
filter(outcome, State == state)
}
best("TX")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state, outcome){
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
sapply(as.numeric(outcome))
filter(!is.na(outcome))%>%
filter(outcome, State == state)
}
best("TX", "heart attack")
## function best(state, outcome) will read outcome data
## from each state and determine lowest 30-day death rate
# inputs best("TX", "heart attack") /returns CYPRESS...
# best("MD", "heart attack) /returns JOHNS...
#best("TX", "heart failure") /returns FORT...
#best("MD", "pneumonia")  /returns GREATER...
#best("BB", "heart attack") /returns error "invalid state"
#best("NY", "hert attack") /returns error "invalid outcome"
#filter(data.df, State == state)
#select(data.df, Hospital.Name,
#      Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
#      Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
#      Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state, outcome){
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(outcome)
filter(!is.na(outcome))%>%
filter(outcome, State == state)%>%
group_by(outcome, "")
}
best("TX", "heart attack")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(outcome)
filter(!is.na(outcome))%>%
filter(outcome, State == state)
}
best("TX")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
outcome <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(outcome)
filter(is.na = "Not Available")%>%
filter(outcome, State == state)
}
best("TX")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State == state)
View()
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State == state)
}
View()
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State == state)
}
View(best)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State == state)
}
best("TX")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State = state)
}
best("MD")
View(csv)
View(state)
View(best)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
tbl_df(csv)
filter(is.na = "Not Available")%>%
filter(csv, State = state)
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
}
View(csv)
csv
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
csv.df <- tbl_df(csv)
}
head(csv.df)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
best <- function(state){
csv <- read.csv("outcome-of-care-measures.csv",
colClasses = "character",
na.strings = "Not Available")
}
head(csv)
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
for (num in c(1, 11, 13:15, 17, 19:21, 23, 25:27, 29, 31:33, 35, 37:39, 41, 43:45)) {
csv[, num] <- as.numeric(csv[, num])
}
tbl_df(csv)
}
coltail <- function(outcome) {
if(outcome == "heart attack") {
"Heart.Attack"
} else if (outcome == "heart failure") {
"Heart.Failure"
} else if (outcome == "pneumonia") {
"Pneumonia"
} else {
stop("invalid outcome")
}
}
best <- function(state, outcome) {
csv <- readcsv()
columnName <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", coltail(outcome), sep="")
csv <- filter(csv, State == state)
if (nrow(csv) == 0) {
stop("invalid state")
}
csv <- arrange_(csv, .dots=c(columnName, "Hospital.Name"))[1, "Hospital.Name"]
as.character(csv)
}
View(csv)
best("TX", "heart attack")
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
tbl_df(csv)
}
View(csv)
head(csv)
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
tbl_df(csv)
}
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
tbl_df(csv)
}
outcome <- function(){
if outcome == "heart attack"{
arrange(csv, contains == "30.Day.Death..Mortality..Rates.from.Heart.Attack")%>%
slice(csv, nrow[1, ])
}
else if outcome == "heart failure"{
arrange(csv, contains == "30.Day.Death..Mortality..Rates.from.Heart.Failure")%>%
slice(csv, nrow[1, ])
}
else if outcome == "heart attack"{
arrange(csv, contains == "30.Day.Death..Mortality..Rates.from.Heart.Attack")%>%
slice(csv, nrow[1, ])
}
else return "error: invalid outcome"
}
best <- function(state, outcome){
filter(outcome, State == state)
}
library(dplyr)
best <- function(state, outcome) {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
outcomeData <- load_data(outcome)
colnames(outcomeData) <- c("hospital", "stateID", "outcome")
## Check that state is valid
if (!(state %in% outcomeData$stateID)) { stop("invalid state") }
## Actually solve the problem
winners <- outcomeData %>% filter(stateID == state) %>%
arrange(outcome, hospital) %>%
select(hospital)
## Return hospital name in that state with lowest 30-day death rate
winners[1, 1]
}
best("TX", "heart attack")
library(dplyr)
best <- function(state, outcome) {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
outcomeData <- csv(outcome)
colnames(outcomeData) <- c("hospital", "stateID", "outcome")
## Check that state is valid
if (!(state %in% outcomeData$stateID)) { stop("invalid state") }
## Actually solve the problem
winners <- outcomeData %>% filter(stateID == state) %>%
arrange(outcome, hospital) %>%
select(hospital)
## Return hospital name in that state with lowest 30-day death rate
winners[1, 1]
}
best("TX", "heart attack")
library(dplyr)
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
tbl_df(csv)
}
view(csv)
head(csv)
getwd()
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
readcsv <- function() {
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
tbl_df(csv)
}
tail(csv)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
readcsv <- function() {
frame <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
}
View(frame)
head(frame)
tail(frame)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
readcsv <- function() {
bryan <- read.csv("outcome-of-care-measures.csv",
colClasses="character",
na.strings="Not Available")
}
View(bryan)
head(bryan)
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
ryan <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
csv <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
View(ryan)
outcome <- function(){
if outcome == "heart attack"{
arrange(csv, contains == "30.Day.Death..Mortality..Rates.from.Heart.Attack")%>%
slice(csv, nrow[1, "Hospital.Name"])
}
outcome <- function(){
if outcome == "heart attack"{
arrange(csv, contains == "30.Day.Death...from.Heart.Attack")%>%
slice(csv, nrow[1, "Hospital.Name"])
}
outcome <- function(){
if outcome == "heart attack"{
arrange(csv, contains == "from.Heart.Attack")%>%
slice(csv, nrow[1, "Hospital.Name"])
}
outcome <- function(){
if outcome == "heart attack"{
arrange(csv, contains == "from.Heart.Attack")%>%
slice(csv, nrow[1, "Hospital.Name"])
}}
install.packages("Lahman")
library(Lahman)
battingstats(BABIP)
library(Lahman)
battingstats(
)
