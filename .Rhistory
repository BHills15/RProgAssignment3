`outcome <- outcome.of.care.measures` <- read.csv("~/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", header=FALSE, na.strings="=c(\"Not Available\"", stringsAsFactors=FALSE)
View(`outcome <- outcome.of.care.measures`)
head(outcome)
outcome <- read.csv("~/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", header=FALSE, na.strings="c(\"Not Available\"", stringsAsFactors=FALSE)
View(outcome)
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[, 11]
oucome[, 11] <- as.numeric(outcome)[, 11]
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
str(outcome)
data <- source("outcome-of-care-measures".csv)
best <- function(state, outcome){
data[grepl(state, data$State)]
if state!in[, 7]{
return ("error : invalid state")
}
}
data <- source("outcome-of-care-measures".csv)
best <- function("state", outcome){
data[grepl("state"", data$State)]
if "state"!in[, 7]{
return ("error : invalid state")
}
}
data <- source("outcome-of-care-measures".csv)
data <- source("outcome-of-care-measures.csv")
data <- outcome
summary(data)
outcome.of.care.measures <- read.csv("~/R/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", na.strings="c(\"Not Available\"")
View(outcome.of.care.measures)
data <- outcome.of.care.measures
str(data)
best <- function(state, outcome)
best <- function(state, outcome){
data[grepl("state", data$State)]
best <- function(state, outcome){
data[grepl("state", data$State)]
if "state"!in[, 7]{
return ("error : invalid state")
}
}
best <- function(state, outcome){
data[grepl(state, data$State)]
if state!in[, 7]{
return ("error : invalid state")
}
}
best <- function(state, outcome){
data[grepl(state, data$State)]
if (state!in[, 7]){
return ("error : invalid state")
}
}
best <- function(state, outcome){
return(state)
if (state!in[, 7]){
return ("error : invalid state")
}
}
best <- function(state, outcome){
return(state)
if (state!in[, 7]) "error : invalid state")
}
}
best <- function(state, outcome){
return(state)
if (state!in[, 7]) "error : invalid state")
}
best <- function(state, outcome){
state <- subset(data, !(state %in% [, 7]) "error : invalid state")
else return data(state)
}
best <- function(state, outcome){
state <- subset(data, state %in% [, 7])
best <- function(state, outcome){
for state in data[, 7]
}
best <- function(state, outcome){
for state in data[, 7]
}
best <- function(state, outcome)
best <- function(state, outcome){
best <- function(state, outcome){
for state in data[, 7]
best <- function(state, outcome){
for "state" in data[, 7]
}
str(data)
str(data)
best <- function(state, outcome){
for x in data$state(do.call(pmin, lapply(1:nrow(data), function(state)data[state, ])))
}
str(data)
best <- function(state, outcome){
data$state(do.call(pmin, lapply(1:nrow(data), function(state)data[state, ])))
}
best("MD", "heart attack")
str(data)
best <- function(state, outcome){
state <- data(do.call(pmin, lapply(1:nrow(data), function(state)data[state, ])))
if state!(data, %in% [, 7] ) <- "error : invalid state"
}
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
str(data)
select(data, )
best <- function(state, outcome){
best.state <- filter(data$State == state)
if state!(data, %in% [, 7] ) <- "error : invalid state"
}
best <- function(state, outcome){
best.state <- filter(data$State == state)
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state == NULL <- "error : invalid state"
}
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL "error : invalid state"
}
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
library(dplyr)
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
getwd()
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read("outcome-of-care-measures.csv")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
tail(data)
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
best.state <- filter(data$State == state)
if best.state = NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
# best.state <- filter(data$State == state)
# if best.state = NULL stop "error : invalid state"
}
best <- function(state, outcome){
filter(data$State == state)
# if best.state = NULL stop "error : invalid state"
}
best <- function(state, outcome){
filter(data$State == state)
if state = NULL stop "error : invalid state"
}
best <- function(state, outcome){
filter(data$State == state)
if state == NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
if state == NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
if "state" == NULL stop "error : invalid state"
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
if state == NULL stop error : invalid state
}
best <- function(state, outcome){
filter(data$State == state)
if state == NULL stop error : invalid state
}
source('C:/Users/B/Toolbox/RProgAssignment3/best.R')
best <- function(state, outcome){
filter(data$State == state)
if state = NULL stop error : invalid state
}
getwd()
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min_rank(mort.column)
}
best("MD", "heart attack")
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min_rank(mort.column)
return mort.column([, 1])
}
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min_rank(mort.column)
return mort.column([, 1])
}
library(dplyr)
setwd("C:/Users/B/Toolbox/RProgAssignment3")
data <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min_rank(mort.column)
}
min_rank
best <- function(state, outcome){
filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min.outcome <- min_rank(mort.column)
}
min.outcome
best("MD", "heart attack")
mort.columns
best <- function(state, outcome){
state <- filter(data$State == state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min.outcome <- min_rank(mort.column)
}
state
best("MD", "heart attack")
best <- function(state, outcome){
state <- filter(data$State = state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min.outcome <- min_rank(mort.column)
}
best <- function(state, outcome){
state <- filter(data$State = state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min.outcome <- min_rank(mort.column)
}
best <- function(state, outcome){
state <- filter(data$State = state)
# if state = NULL stop error : invalid state
mort.columns <- select(data, ncol = 2, ncol = 11, ncol = 17, ncol = 23, contains = outcome)
min.outcome <- min_rank(mort.columns)
}
